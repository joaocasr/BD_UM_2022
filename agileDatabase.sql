-- MySQL Script generated by MySQL Workbench
-- Tue Mar 29 16:55:22 2021
-- Model: AGILE EER Diagram

CREATE DATABASE agileDB
	DEFAULT CHARSET = utf8mb4
	DEFAULT ENCRYPTION = 'N';
    
-- -----------------------------------------------------
-- Schema agileDB
-- -----------------------------------------------------

USE agileDB;

-- ---------------------------------------------------------------
-- Table `Colaborador` - Tabela de colaboradores
-- ---------------------------------------------------------------
-- SELECT * FROM agileDB.Colaborador;
CREATE TABLE IF NOT EXISTS agileDB.Colaborador (
    IDcolab INT NOT NULL,
    Nome VARCHAR(45) NOT NULL,
    Area VARCHAR(20) NOT NULL,
    local_de_trabalho VARCHAR(20) NOT NULL,
    anos_na_empresa INT NOT NULL,
    fk_Colaborador_IDrevisor INT,
		PRIMARY KEY(IDcolab),
        FOREIGN KEY(fk_Colaborador_IDrevisor) REFERENCES agileDB.Colaborador(IDcolab)
)
	ENGINE = InnoDB;

/*
ALTER TABLE colaborador,
	DROP COLUMN 'anos_na_empresa'
    ADD COLUMN 'anos_na_empresa' INT
    
-- -------------------------------------------------------------------------------------
-- Table `Projeto` - Tabela correspondente aos projetos da empresa
-- -------------------------------------------------------------------------------------
*/
-- SELECT * FROM agileDB.Projeto;
CREATE TABLE IF NOT EXISTS agileDB.Projeto (
	IDprojeto INT NOT NULL,
    Nome VARCHAR(20),
    estado VARCHAR(20),
	data_limite VARCHAR(20),
    descricao TEXT,
    Scrum_master VARCHAR(20),
		PRIMARY KEY(IDprojeto)
);

-- -------------------------------------------------------------------------------------
-- Table `Backlog` - Tabela de um backlog 
-- -------------------------------------------------------------------------------------
CREATE TABLE agileDB.Backlog (
    backlogID INT NOT NULL,
    descricao TEXT,
    tipo VARCHAR(20),
    fk_Projeto_IDprojeto INT,
		 PRIMARY KEY(backlogID),
         FOREIGN KEY(fk_Projeto_IDprojeto) REFERENCES agileDB.Projeto(IDprojeto)
);

-- -------------------------------------------------------------------------------------
-- Table `Product_Increment` - Tabela de um PI 
-- -------------------------------------------------------------------------------------
-- SELECT * FROM agileDB.Product_Increment;
CREATE TABLE IF NOT EXISTS agileDB.Product_Increment (
    PIID INT NOT NULL,
    Título VARCHAR(30),
    tempo_restante VARCHAR(30),
    fk_Projeto_IDprojeto INT,
		PRIMARY KEY(PIID),
		FOREIGN KEY(fk_Projeto_IDprojeto) REFERENCES agileDB.Projeto(IDprojeto)
);

-- -------------------------------------------------------------------------------------
-- Table `Sprint` - Tabela de um sprint 
-- -------------------------------------------------------------------------------------
-- SELECT * FROM agileDB.Sprint;
CREATE TABLE IF NOT EXISTS agileDB.Sprint (
    Número INT NOT NULL,
    data_inicial VARCHAR(20),
    data_fim VARCHAR(20),
    IDsprint INT NOT NULL,
	fk_Product_Increment_PIID INT,
    fk_Backlog_backlogID INT,
		PRIMARY KEY(IDsprint),
        FOREIGN KEY(fk_Product_Increment_PIID) REFERENCES agileDB.Product_Increment(PIID),
		FOREIGN KEY(fk_Backlog_backlogID) REFERENCES agileDB.Backlog(backlogID)
);

-- -------------------------------------------------------------------------------------
-- Table `Equipa` - Tabela de uma equipa 
-- -------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS agileDB.Equipa (
    EquipaId INT NOT NULL,
    fk_Projeto_IDprojeto INT,
    designacao VARCHAR(20),
		PRIMARY KEY(EquipaId),
        FOREIGN KEY(fk_Projeto_IDprojeto) REFERENCES agileDB.Projeto(IDprojeto)
);

-- -------------------------------------------------------------------------------------
-- Table `Workpackage` - Tabela de um Workpackage 
-- -------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS agileDB.Workpackage (
	IDworkpackage INT NOT NULL,
    data_de_criacao VARCHAR(20),
    duracao VARCHAR(20),
    fk_Equipa_EquipaId INT,
    fk_Backlog_backlogID INT,
		PRIMARY KEY(IDworkpackage),
		FOREIGN KEY(fk_Equipa_EquipaId) REFERENCES agileDB.Equipa(EquipaId),
		FOREIGN KEY(fk_Backlog_backlogID) REFERENCES agileDB.Backlog(backlogID)
);

    -- -------------------------------------------------------------------------------------
-- Table `Tarefa` - Tabela de uma Tarefa 
-- -------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS agileDB.Tarefa (
    ID INT NOT NULL,
    Tstatus VARCHAR(20),
    descricao TEXT,
    fk_Workpackage_IDworkpackage INT,
    fk_Colaborador_IDcolab INT,
		PRIMARY KEY(ID),
        FOREIGN KEY(fk_Workpackage_IDworkpackage) REFERENCES agileDB.Workpackage(IDworkpackage),
        FOREIGN KEY(fk_Colaborador_IDcolab) REFERENCES agileDB.Colaborador(IDcolab)
);

-- -------------------------------------------------------------------------------------
-- Table `Seccao_bug` - Tabela referente a secção de bugs 
-- -------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS agileDB.Seccao_bug (
    Prioridade VARCHAR(20),
    codigo INT NOT NULL,
    descricao TEXT,
    fk_Tarefa_ID INT,
		PRIMARY KEY(codigo),
        FOREIGN KEY(fk_Tarefa_ID) REFERENCES agileDB.Tarefa(ID)
);

-- -------------------------------------------------------------------------------------
-- Table `EquipaEColaborador` - Tabela de EquipaEColaborador 
-- -------------------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS agileDB.EquipaEColaborador (
    fk_Equipa_EquipaId INT,
    fk_Colaborador_IDcolab INT,
		FOREIGN KEY(fk_Equipa_EquipaId) REFERENCES agileDB.Equipa(EquipaId),
        FOREIGN KEY(fk_Colaborador_IDcolab) REFERENCES agileDB.Colaborador(IDcolab)
);
